// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VeaEventAssociation.Infrastructure.SQliteDomainModelPersistence;

#nullable disable

namespace VeaEventAssociation.Infrastructure.SQliteDomainModelPersistence.Migrations
{
    [DbContext(typeof(DmContext))]
    partial class DmContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4");

            modelBuilder.Entity("Domain.Aggregates.Creator.Creator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Creators");
                });

            modelBuilder.Entity("Domain.Aggregates.Events.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.Property<int>("locationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("locationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.Aggregates.Guests.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Domain.Aggregates.Locations.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Domain.Common.Entities.AvailabilityInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("locationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("locationId");

                    b.ToTable("AvailabilityInterval");
                });

            modelBuilder.Entity("Domain.Common.Entities.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("eventId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("eventId");

                    b.ToTable("Invitation");
                });

            modelBuilder.Entity("Domain.Common.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventId1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GuestId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventId1");

                    b.HasIndex("GuestId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("EventGuest", b =>
                {
                    b.Property<int>("EventsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuestsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventsId", "GuestsId");

                    b.HasIndex("GuestsId");

                    b.ToTable("EventGuests", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.Events.Event", b =>
                {
                    b.HasOne("Domain.Aggregates.Locations.Location", "Location")
                        .WithMany()
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.Common.Entities.AvailabilityInterval", b =>
                {
                    b.HasOne("Domain.Aggregates.Locations.Location", null)
                        .WithMany("Availability")
                        .HasForeignKey("locationId");
                });

            modelBuilder.Entity("Domain.Common.Entities.Invitation", b =>
                {
                    b.HasOne("Domain.Aggregates.Guests.Guest", null)
                        .WithMany("Invitations")
                        .HasForeignKey("GuestId");

                    b.HasOne("Domain.Aggregates.Events.Event", null)
                        .WithMany("Invitations")
                        .HasForeignKey("eventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Common.Entities.Request", b =>
                {
                    b.HasOne("Domain.Aggregates.Events.Event", null)
                        .WithMany("Requests")
                        .HasForeignKey("EventId");

                    b.HasOne("Domain.Aggregates.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId1");

                    b.HasOne("Domain.Aggregates.Guests.Guest", "Guest")
                        .WithMany("Requests")
                        .HasForeignKey("GuestId");

                    b.Navigation("Event");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("EventGuest", b =>
                {
                    b.HasOne("Domain.Aggregates.Events.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Aggregates.Guests.Guest", null)
                        .WithMany()
                        .HasForeignKey("GuestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Aggregates.Events.Event", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Aggregates.Guests.Guest", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Aggregates.Locations.Location", b =>
                {
                    b.Navigation("Availability");
                });
#pragma warning restore 612, 618
        }
    }
}
